{"version":3,"sources":["store/loadingReducer.tsx","store/filterReducer.tsx","store/todosReducer.tsx","store/userReducer.tsx","store/userIdReducer.tsx","store/searchQueryReducer.tsx","store/index.ts","api/api.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["reducer","loading","action","type","sort","todos","Math","random","map","todo","id","todoId","completed","filter","user","getUserId","userId","inputChange","rootReducer","combineReducers","loadingReducer","sortReducer","todosReducer","userReducer","userIdReducer","inputChangeReducer","isLoading","state","getSort","getUser","setUserId","getInputChange","fetchUser","dataFromServer","dispatch","then","data","getSortTodos","title","toLowerCase","includes","store","createStore","composeWithDevTools","applyMiddleware","thunk","BASE_URL","getTodos","a","fetch","promise","json","result","getUsers","TodoList","useDispatch","filterTitle","useSelector","selectSort","className","htmlFor","name","placeholder","value","onChange","event","target","key","onClick","classNames","checked","readOnly","CurrentUser","email","phone","App","selectedUserId","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72a35fac.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst START = 'START';\nconst FINISH = 'FINISH';\n\nexport const startLoading = () => ({ type: START });\nexport const finishLoading = () => ({ type: FINISH });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START:\n      return false;\n    case FINISH:\n      return true;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SORT_TODOS = 'SORT_TODOS';\n\nexport const setSort = (sort: string) => ({ type: SORT_TODOS, sort});\n\nconst reducer = (sort = '', action: AnyAction) => {\n  switch (action.type) {\n    case SORT_TODOS:\n      return action.sort;\n\n    default:\n      return sort;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { Todos } from '../components/interfaces';\n\nconst SET_TODOS = 'SET_TODOS';\nconst RANDOMIZE = 'RANDOMIZE';\nconst CHECK_ON_COMPLETED_TODOS = 'CHECK_ON_COMPLETED_TODOS';\nconst REMOVE = 'REMOVE';\n\nexport const setTodos = (todos: Todos[]) => ({ type: SET_TODOS, todos});\nexport const randomize = () => ({ type: RANDOMIZE });\nexport const checkOnCompletedTodos = (todoId: number) => ({ type: CHECK_ON_COMPLETED_TODOS, todoId});\nexport const removeTodo = (todoId: number) => ({ type: REMOVE, todoId});\n\nconst reducer = (todos = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return action.todos;\n\n    case RANDOMIZE:\n      return [...todos].sort(() => 0.5 - Math.random());\n\n    case CHECK_ON_COMPLETED_TODOS:\n      return todos.map((todo: any) => todo.id !== action.todoId\n        ? todo\n        : ({\n          ...todo,\n          completed: !todo.completed,\n        })\n      )\n\n    case REMOVE:\n      return [...todos].filter((todo: Todos) => todo.id !== action.todoId);\n\n    default:\n      return todos;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { User } from '../components/interfaces';\n\nconst SET_USER = 'SET_USER';\n\nexport const setUser = (user: User) => ({ type: SET_USER, user});\n\nconst reducer = (user = null, action: AnyAction) => {\n  switch (action.type) {\n    case SET_USER:\n      return action.user;\n\n    default:\n      return user;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst USER_ID = 'USER_ID';\n\nexport const getUserId = (userId: number) => ({\n  type: USER_ID, userId\n});\n\nconst reducer = (userId = 0, action: AnyAction) => {\n  switch (action.type) {\n    case USER_ID:\n      return action.userId;\n\n    default:\n      return userId;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst INPUT_CHANGE = 'INPUT_CHANGE';\n\nexport const sortByInput = (inputChange: string) => ({ type: INPUT_CHANGE, inputChange});\n\nconst reducer = (inputChange = '', action: AnyAction) => {\n  switch (action.type) {\n    case INPUT_CHANGE:\n      return action.inputChange;\n\n    default:\n      return inputChange;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Todos, User } from '../components/interfaces';\nimport loadingReducer from './loadingReducer';\nimport sortReducer from './filterReducer';\nimport todosReducer, { setTodos } from './todosReducer';\nimport userReducer, { setUser } from './userReducer';\nimport userIdReducer, { getUserId } from './userIdReducer';\nimport inputChangeReducer from './searchQueryReducer';\n\nconst ALL = 'all';\nconst COMPLETED = 'done';\nconst NOT_COMPLETED = 'undone';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  sort: sortReducer,\n  todos: todosReducer,\n  user: userReducer,\n  userId: userIdReducer,\n  inputChange: inputChangeReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const getSort = (state: RootState) => state.sort;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getUser = (state: RootState) => state.user;\nexport const setUserId = (state: RootState) => state.userId;\nexport const getInputChange = (state: RootState) => state.inputChange;\n\nexport const fetchTodo = (dataFromServer: any ) => {\n  return (dispatch: Function) => { \n    dataFromServer()\n      .then((data: Todos[]) => {\n        dispatch(setTodos(data));\n      })\n  }\n}\n\nexport const fetchUser = (dataFromServer: any, id: number) => {\n  return (dispatch: Function) => { \n    dataFromServer(id)\n      .then((data: User) => {\n        dispatch(setUser(data));\n        dispatch(getUserId(id));\n      })\n  }\n}\n\nexport const getSortTodos = (state: RootState) => {\n  return [...state.todos].filter((todo) => {\n    switch (state.sort) {\n      case ALL:\n        return todo;\n\n      case COMPLETED:\n        return todo.completed;\n\n      case NOT_COMPLETED:\n        return !todo.completed;\n\n      default:\n        return todo;\n    }\n  }).filter(todo =>todo.title !== null && todo.title.toLowerCase()\n  .includes(state.inputChange.toLowerCase()));\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","const BASE_URL = `https://mate-api.herokuapp.com`;\n\nexport const getTodos = async() => {\n  return await fetch(`${BASE_URL}/todos`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n};\n\nexport const getUsers = async(userId: number) => {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todos } from '../interfaces';\nimport { getInputChange, getSort, fetchUser } from '../../store';\nimport { sortByInput } from '../../store/searchQueryReducer';\nimport { randomize, checkOnCompletedTodos, removeTodo } from '../../store/todosReducer';\nimport { setSort } from '../../store/filterReducer';\nimport { getUsers } from '../../api/api';\n\ntype TodoListProps = {\n  todos: Todos[];\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({todos}) => {\n  const dispatch = useDispatch();\n  const selectOfTodos = [`done`, `undone`];\n  const filterTitle = useSelector(getInputChange);\n  const selectSort = useSelector(getSort);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"inputs\">\n\n        <div className=\"inputs__item\">\n          <label htmlFor=\"search\" className=\"TodoList__label\">Search</label>\n            <input\n            id=\"search\"\n              className=\"TodoList__filter\"\n              type=\"text\"\n              name=\"filterTitle\"\n              placeholder=\"Input the title of todo\"\n              value={filterTitle}\n              onChange={event => dispatch(sortByInput(event.target.value))}\n            />\n            <span className=\"bar\" />\n        </div>\n\n        <div className=\"inputs__item\">\n          <label htmlFor=\"complite\">\n            Filter\n          </label>\n          <select\n            name=\"selectTodos\"\n            value={selectSort}\n            onChange={event => dispatch(setSort(event.target.value))}\n          >\n            <option value=\"all\">\n              all\n            </option>\n            {selectOfTodos.map(todo => (\n              <option\n                key={todo}\n                value={todo}\n              >\n                {todo}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"inputs__item\">\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={() => dispatch(randomize())}\n          >\n            Randomize\n          </button>\n        </div>\n      </div>\n\n      <ul>\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames(\n              'TodoList__item',\n              todo.completed\n                ? 'TodoList__item--checked'\n                : 'TodoList__item--unchecked',\n            )}\n          >\n          <div>\n            <label>\n              <input\n                className=\"TodoList__input\"\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={() => dispatch(checkOnCompletedTodos(todo.id))}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n            {todo.completed\n              ? (\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                  onClick={() => dispatch(fetchUser(getUsers, todo.userId))}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              )\n              : (\n                <button\n                  className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                  type=\"button\"\n                  onClick={() => dispatch(fetchUser(getUsers, todo.userId))}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              )\n            }\n            <button\n              className=\"TodoList__beautiful-button\"\n              type=\"button\"\n              onClick={() => dispatch(removeTodo(todo.id))}\n            >\n              Remove\n            </button>\n          </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch } from 'react-redux';\nimport { User } from '../interfaces';\nimport { getUserId } from '../../store/userIdReducer';\n\ntype CurrentUserProps = {\n  user: User;\n};\n\nexport const CurrentUser: React.FC<CurrentUserProps> = ({ user }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {`Selected user:${user.id}`}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n      <button\n        className=\"beautiful.button\"\n        type=\"button\"\n        onClick={() => dispatch(getUserId(0))}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n\nexport default CurrentUser;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport { getTodos } from './api/api';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { getSortTodos, isLoading, getUser, setUserId, fetchTodo } from './store';\nimport { startLoading, finishLoading } from './store/loadingReducer';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getSortTodos);\n  const loading = useSelector(isLoading);\n  const user = useSelector(getUser);\n  const selectedUserId = useSelector(setUserId);\n\n  const loadTodos = () => {\n    dispatch(startLoading());\n    dispatch(fetchTodo(getTodos));\n    dispatch(finishLoading());\n  };\n  return (\n    <div className=\"App\">\n      {!loading\n        ? (\n          <div className=\"App__download\">\n            <button\n              type=\"button\"\n              className=\"App__beautiful-button\"\n              onClick={loadTodos}\n            >\n              {'Load data'}\n            </button>\n          </div>\n        )\n        : (\n          <>\n            <div className=\"App__sidebar\">\n              <TodoList\n                todos={todos}\n              />\n            </div>\n\n            <div className=\"App__content\">\n              <div className=\"App__content-container\">\n              {user !== null && selectedUserId ? (\n                <CurrentUser\n                  user = {user}\n                />\n              )\n                : 'No user selected'}\n              </div>\n           </div>\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}